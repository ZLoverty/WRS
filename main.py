from readlib import *
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import markdown2
from flask import Flask, request, jsonify
import sys

app = Flask(__name__)

# This will respond to GET requests on the root path, indicating the service is alive.
@app.route('/', methods=['GET'])
def health_check():
    return "OK", 200

@app.route('/', methods=['POST'])
def send_summary_trigger():
    # Configure the information sources (RSS feeds)
    target_feeds = read_rss_from_yaml("rss.yaml")

    # Configure the email
    SUBJECT = "Weekly Science Summary"
    SENDER_EMAIL = "liuzy19911112@gmail.com"
    RECIPIENT_EMAIL = ["liuzy19911112@gmail.com"]
    WIDTH = 800 # px, for the email text body

    # System configs
    SMTP_SERVER = "smtp.gmail.com"
    SMTP_PORT = 587
    SENDER_PASSWORD = os.getenv("GOOGLE_APP_PW")

    # Miscellaneous
    CLOSE_REMARK = f"The message is generated by AI model {model_name}. Verify the information before using it."

    summaries = {}
    # The prompt for the model
    for source in target_feeds:
        articles = get_articles_from_rss(target_feeds[source])
        title_list = []
        for entry in articles:
            title = "{0} ({1})".format(entry.get("title", "No title"), entry.get("link", "No link"))
            title_list.append(title)
        summary = analyze_article_collection(title_list)
        summaries[source] = summary

    # prepare the HTML
    md = [f"## {src}\n {summ}" for src, summ in summaries.items()]
    md.append(CLOSE_REMARK)
    html_body = markdown2.markdown("\n\n".join(md))
    final_html = html_wrap(html_body, WIDTH)

    # for preview and debugging only: write to html and view locally
    # with open("science.html", "w") as f:
    #     f.write(final_html)
    # exit()
    ################################################################

    # --- 3. Create the Email Message ---
    # We use MIMEMultipart to create a message that supports both HTML and a plain text fallback.
    msg = MIMEMultipart('alternative')
    msg['Subject'] = SUBJECT
    msg['From'] = SENDER_EMAIL
    msg['To'] = ", ".join(RECIPIENT_EMAIL)

    # Create the plain-text and HTML versions of your message
    # The plain text version is a fallback for email clients that don't support HTML
    text_part = MIMEText("This is the plain text version of the email.", 'plain')
    html_part = MIMEText(final_html, 'html')

    # Attach parts into message container
    # The last part of a multipart message, in this case the HTML part, is preferred.
    msg.attach(text_part)
    msg.attach(html_part)

    # --- 4. Send the Email ---
    try:
        print("Connecting to SMTP server...")
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()  # Secure the connection
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, msg.as_string())
        print("Email sent successfully!")
        return jsonify({"status": "success", "message": "Email sent successfully!"}), 200
    except Exception as e:
        # Catch any unexpected error that occurs in the function
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        # Log the full traceback for debugging purposes
        import traceback
        traceback.print_exc(file=sys.stderr)
        return jsonify({"status": "error", "message": f"An error occurred: {str(e)}"}), 500
    finally:
        # Ensure SMTP server connection is closed if it was opened
        if 'server' in locals() and server:
            try:
                server.quit()
            except Exception as e:
                print(f"Error while quitting SMTP server: {e}", file=sys.stderr)

if __name__ == "__main__":
    # Get the port from the environment variable, defaulting to 8080 if not set.
    # Cloud Run always provides a 'PORT' environment variable.
    port = int(os.environ.get('PORT', 8080))

    # Run the Flask application.
    # host='0.0.0.0' is crucial to listen on all available network interfaces
    # inside the container, allowing Cloud Run to route traffic to it.
    app.run(host='0.0.0.0', port=port)